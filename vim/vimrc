" Don't try to be vi compatible
set nocompatible
set noshowmode
syntax on
" color column
set cc=80

" PLUGINS
"
" automate vim plug install
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
endif

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
Plug 'airblade/vim-gitgutter'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'morhetz/gruvbox'  
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'peitalin/vim-jsx-typescript'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
call plug#end()

colorscheme gruvbox
set background=dark
set guifont=Source\ Code\ Pro\ Semibold:h12

" Enable filetype plugins
filetype plugin on
filetype indent on

" :W sudo saves the file
" (useful for handling the permission-denied error)
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!

" Show relative line numbers
set relativenumber
set number

" Show file stats
set ruler

" Height of the command bar
set cmdheight=1

" Encoding
set encoding=utf-8

" Whitespace
set wrap
set textwidth=79
set formatoptions=tcqrn1
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set noshiftround

" Cursor motion
set scrolloff=5
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" Allow hidden buffers
set hidden

" Rendering
set ttyfast

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Needed for status line
set laststatus=2

" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowritebackup
set nowb
set noswapfile


" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" not sure, but ok
set mouse=a

set updatetime=300

let mapleader=','
" MAPPINGS

nmap <leader>n :NERDTreeToggle<CR>
map <leader>k <C-W>k
map <leader>j <C-W>j
map <leader>h <C-W>h
map <leader>l <C-W>l
" equal windows
map <leader>= <C-W>=
" spliting usage:
" :sp<CR>  -> splits horizontally
" :vsp<CR> -> vertically
" :sp <filename><CR> 
" <C-W>r   -> rotates panes

" fuzzy finder
map <leader>af :Files<CR>
map <leader>b :Buffers<CR>
map <leader>f :GFiles<CR>
map <leader>sl :BLines<CR>
" Which searcher is better?
" map <leader>se :Ag<CR>
map <leader>se :Rg<CR>


" fast quit
map <leader>q :q<CR>

" git-gutter hunks
nmap <leader>hn <Plug>(GitGutterNextHunk)
nmap <leader>hh :GitGutterLineHighlightsToggle<CR>
" preview hunk with: <leader>hp by default
" undo hunk with: <leader>hu by def


" COC RELATED -------------------------------------------------
" TODO
" https://github.com/clangd/coc-clangd
" https://github.com/neoclide/coc.nvim
"
" generate cpp project compile-commands.json
" cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1

" set signcolumn=number

set shortmess+=c
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gs :CocCommand clangd.switchSourceHeader<CR>
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
" CocSearch dobra stvar za refactoranje 
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
if (index(['vim','help'], &filetype) >= 0)
execute 'h '.expand('<cword>')
else
call CocAction('doHover')
endif
endfunction

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
let col = col('.') - 1
return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
inoremap <silent><expr> <c-space> coc#refresh()
else
inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Formatting selected code.
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)
"
" COC END -------------------------------------------------------

" Vim commentary
" gcc - comment a line
" gc - comment motion or visual selection
"

" Customize PMenu colors
hi Pmenu ctermbg=green ctermfg=black


" when reopen file, goto last visited position
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

function FormatBuffer()
  if &modified && !empty(findfile('.clang-format', expand('%:p:h') . ';'))
    let cursor_pos = getpos('.')
    :%!clang-format
    call setpos('.', cursor_pos)
  endif
endfunction
autocmd BufWritePre *.h,*.hpp,*.c,*.cpp,*.vert,*.frag :call FormatBuffer()

" thrift support
au BufRead,BufNewFile *.thrift set filetype=thrift
au! Syntax thrift source ~/.vim/thrift.vim

" prettier config
" :Prettier<CR>
" <Leader>p
"
let g:prettier#config#tab_width = 2
let g:prettier#config#print_width = 80
